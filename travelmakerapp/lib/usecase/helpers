
Tasks:
DOING Create the createTravel form
    DONE need to create a function that shows the participants (during the createTravelForm)
    - Need to add the createTravel texts to the intlPages (do the translation)
    DONE Transform the current expansionTiles into the custom ExpansionTile
    DONE Resolve the problem with the scroll

- Need to create a method that get correct texts from vehicles

DONE Create a custom TextFormField that receives the validador, TextEditing controller and Texts etc..)

DONE Need a participantShow dialog

DONE Create the createTravelPage (just the base)

- Design the createTravel form page

- Need to check if the getDeviceLocation is working (It is working but is not passing the right location to the User instance in userProvider)

- Need to divide the app_*languages into sections to every screen, use comments and help of chatpgt to do in other languages

STILL NOT CONCLUDED Add new AppBar on userConfigScreen (***Need to configure the userForm to receive a button, add the user image and a button to edit it)

- Need to check the flutter lints and analysis options.yaml to see what I need to do

DONE Maybe add another third color for contrast with the buttons (in both themes)

- Need to rename some files

- DONE Try test the google api maps in a test page

- Need to create a travelStop card with maps on background image

- Need to check what is the unhandled exceptions

DONE Need to see the travelForm styles...

- Add new logo

- Need to take the webNomatim in a separeted file

STILL NOT CONCLUDED Document usecase functions

- add selectDate function on usecase/dates/getDate

- Need to verify why is toggleLanguage not working

- Need to add a custom Dialog for errors in travelForm

- Create a custom dialog that inform what is wrong or missing in the forms

- In vehicle desired selector, in title, add what vehicle is selected

DONE Create a custom ExpansionTile


Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 5, vertical: 5),
                            child: ListView.builder(
                                scrollDirection: Axis.horizontal,
                                itemCount: Experiences.values.length,
                                itemBuilder: (context, index){
                                  final experience = Experiences.values[index];

                                  return ListTile(
                                    title: Chip(
                                      label: Text(experience.name),
                                    ),
                                  );

                                }),

                          ),

/*
            Button1(onTap: (){
              apiGET();
            }, text: "get map test", icon: Icons.get_app)

           */


            /*
            Image.network(staticMapURL(latitude, longitude))

             */

             /*
               double latitude = -26.9187;
               double longitude = -49.066;

                */






createTravelProvider:

variables:
personsListIDs[]
stopsListIds[]
travelID;
start date;
final date;
desired Transport;

textFieldKeys & controllers

functions to open the form:

if(editMode == true) => getTravel() & fillForm()
else => let everything empty

*all of these below are going to get used in travelForm for building the widgets
- getTitle(travelTitle) - To fill the travelTitle controller
- GetDescription(travelDescription) - To fill the travelDescription controller
- getDestination(travelDestination) - to fill the travelDestination controller
- GetPerson(personID) - To fill the personsList in the listViewBuilder of persons (returns a person)
- Getdates(start and final date) - To fill the start & final dates variables
- getDesiredTransport - To fill the type of desired vehicle
- GetStop(stopID) - To fill the stopList in listViewBuilder of stop

editMode:
- getTravel - To fill the provider with all the infos to open it from database
- fillForm - to fill the travelForm with all the infos to open it

createMode:

- databaseAddPerson() - To add person into the database
- DataBaseAddStop() - to add stop into the database

- updatePersonList(need to first add the person to database & then get the id) - to add the person to personListIDs
- updateStopList(need  to first add the stop to database & then get the id) - To add the stop to stopListIDs


CustomTextFormField1(
      title: "Digite o nome da cidade",
      controller: createTravelProvider.travelDestination,
      formFieldKey: createTravelProvider.travelDestinationFormKey,
      validator: (value){
        if(value==null) {
          return 'Você precisa adicionar o destino final (cidade) da sua viagem!';
        }
        if(value.length<2){
          return 'Não é possível pegar cidades menores que 3 caracteres';
        }
        return null;
      },
    ),













onPressed: (){
                                                //toogle edit mode
                                                personProvider.editPersonMode(true);
                                                // set the person that is going to be edited
                                                personProvider.setPersonToEdit(ctp.travelPersonsList[index], index);
                                                // call the person dialog
                                                showDialog(
                                                    context: context,
                                                    builder: (context) => ParticipantDialog()
                                                );

                                              },

onPressed: (){
                                                ctp.removePerson(index);
                                                print("removeu!");
                                              }






 Ao apertar o botão de salvar, ele vai chamar a função de salvar viagem (create travel) lá no provider,
 essa função vai se encarregar de verificar se tem algum campo nulo e se tiver ele vai soltar um alerta na tela,
 caso os campos não estejam nulos, ele vai jogar pra classe travel validar a si mesma, com as regras lá dentro
 se a função de validação do travel voltar como true, vai adicionar viagem a lista de viagens do
 usuário e adicionar ao banco de dados, voltar para a tela home



Entidades: contém as entidades do sistema -> Entities
Casos de uso: contém os casos de uso do sistema, e suas regras de negócio relacionadas. -> UseCase
Repositório de dados: contém os métodos de acesso ao banco de dados. -> DataBase
Repositório de arquivos: contém os métodos de acesso ao armazenamento do dispositivo. -> data



SABADO 23/08 - O QUE PRECISO FAZER:
 - Precisa alterar experiências para viajem e não para parada!!
 - Precisa colocar descrição nas paradas no lugar de experiências
 - precisa salvar fotos de cada pessoa em uma pasta única



 TypeAheadField<Map<String, dynamic>>(
                               suggestionsCallback: (pattern) async {
                                 if (pattern.isEmpty) return [];
                                 return await fetchCitySuggestions(pattern);
                               },
                               emptyBuilder: (context){
                                 return SizedBox.shrink();
                               },
                               decorationBuilder: (context, child) {
                                 return Material(
                                   elevation: 4,
                                   borderRadius: BorderRadius.circular(15),
                                   color: getCanvasColor(),
                                   child: SingleChildScrollView(
                                       physics: const NeverScrollableScrollPhysics(),
                                       child: child
                                   ),
                                 );
                               },
                               builder: (context, internalController, focusNode) {
                                 internalController.text=createTravelProvider.stopDestinationController.text;

                                 internalController.addListener(() {
                                   if (createTravelProvider.stopDestinationController.text != internalController.text) {
                                     createTravelProvider.stopDestinationController.text=internalController.text;
                                   }
                                 });

                                 focusNode.addListener(() {
                                   if (focusNode.hasFocus) {
                                     Scrollable.ensureVisible(
                                       createTravelProvider.stopDestinationFormKey.currentContext!,
                                       duration: Duration(milliseconds: 300),
                                       curve: Curves.easeInOut,
                                       alignment: 0.35,
                                     );
                                   }
                                 });


                                 return TextField(
                                   cursorColor: getPrimaryColor(),
                                   style: Theme.of(context).textTheme.displaySmall,
                                   textAlign: TextAlign.center,
                                   controller: internalController,
                                   key: createTravelProvider.stopDestinationFormKey,
                                   focusNode: focusNode,
                                   decoration: getInputDecoration("Digite a cidade", context),
                                 );
                               },
                               itemBuilder: (context, suggestion) {
                                 return ListTile(
                                   tileColor: getCanvasColor(),
                                   shape: RoundedRectangleBorder(borderRadius: BorderRadiusGeometry.circular(15)),
                                   title: Text(suggestion['description'], style: Theme.of(context).textTheme.displaySmall,),
                                 );
                               },

                               // set false because the widget is already forcing hiding inside the onSelected function (both activated gets a double focus bug)
                               hideOnSelect: false,

                               onSelected: (suggestion) async {
                                 print('Cidade escolhida: ${suggestion['description']}');
                                 print('Lat: ${suggestion['lat']}, Lng: ${suggestion['lng']}');
                                 createTravelProvider.stopDestinationLatitude.text = suggestion['lat'].toString();
                                 createTravelProvider.stopDestinationLongitude.text = suggestion['lng'].toString();
                                 createTravelProvider.toggleStopDestinationController(suggestion['description']);
                                 FocusScope.of(context).unfocus();

                               },
                             ),












Inside lib:

    ------ Clean Architecture ------------------------------------
    /Frameworks & drivers:
    |-> /UI: Widgets & Themes (because they share the context)
          |-> /pages: Screens (with the routes)
          |-> /modules: Custom Widgets

    |-> /dataBase: DataBaseMetods
    |-> /services: API
    |-> /data: Device data acess methods

    /Interface adapters;
    | -> /Providers: Providers
    | -> /Repositories: Implementation of repositories

    /UseCase:
    | -> /Entities: Manipulation of entities
    | -> /Repositores: Interfaces of repositories

    /Entities:
    | -> Rules of business and only dart classes

    ----------------------------------------------------------------

    /l10n: For internacionalization methods
    main.dart: to run the program






